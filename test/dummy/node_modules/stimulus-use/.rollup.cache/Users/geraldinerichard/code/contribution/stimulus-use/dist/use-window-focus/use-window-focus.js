import { StimulusUse } from '../stimulus-use';
export class UseWindowFocus extends StimulusUse {
    constructor(controller, options = {}) {
        super(controller, options);
        this.observe = () => {
            // triggers initial callback on observe
            if (document.hasFocus()) {
                this.becomesFocused();
            }
            else {
                console.log('i should be there');
                this.becomesUnfocused();
            }
            this.interval = setInterval(() => {
                this.handleWindowFocusChange();
            }, this.intervalDuration);
        };
        this.unobserve = () => {
            clearInterval(this.interval);
        };
        // private
        this.becomesUnfocused = (event) => {
            this.controller.hasFocus = false;
            this.call('unfocus', event);
            this.log('unfocus', { hasFocus: false });
            this.dispatch('unfocus', { event, hasFocus: false });
        };
        this.becomesFocused = (event) => {
            this.controller.hasFocus = true;
            this.call('focus', event);
            this.log('focus', { hasFocus: true });
            this.dispatch('focus', { event, hasFocus: true });
        };
        this.handleWindowFocusChange = (event) => {
            if (document.hasFocus() && !this.controller.hasFocus) {
                this.becomesFocused(event);
            }
            else if (!document.hasFocus() && this.controller.hasFocus) {
                this.becomesUnfocused(event);
            }
        };
        this.controller = controller;
        this.intervalDuration = options.interval || 200;
        this.enhanceController();
        this.observe();
    }
    enhanceController() {
        const controllerDisconnect = this.controllerDisconnect;
        const disconnect = () => {
            this.unobserve();
            controllerDisconnect();
        };
        Object.assign(this.controller, { disconnect });
    }
}
export const useWindowFocus = (controller, options = {}) => {
    const observer = new UseWindowFocus(controller, options);
    return [observer.observe, observer.unobserve];
};
//# sourceMappingURL=use-window-focus.js.map